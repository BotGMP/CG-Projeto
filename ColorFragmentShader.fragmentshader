#version 330 core

in vec2 UV;
in vec3 fragPosition_cameraSpace;
in vec3 fragNormal_cameraSpace;

out vec4 color;

uniform sampler2D textureSampler;
uniform vec3 lightPosition_cameraSpace;
uniform vec3 lightColor;
uniform vec3 ambientColor;
uniform float shininess;
uniform float strength;

void main() {
    vec3 textureColor = texture(textureSampler, UV).rgb;
    
    vec3 N = normalize(fragNormal_cameraSpace);
    vec3 L = normalize(lightPosition_cameraSpace - fragPosition_cameraSpace);

    vec3 ambient = ambientColor * textureColor;

    float diff = max(dot(N, L), 0.0);
    vec3 diffuse = lightColor * diff * textureColor;

    vec3 viewDir = normalize(-fragPosition_cameraSpace);
    vec3 reflectDir = reflect(-L, N);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    vec3 specular = strength * spec * lightColor;

    color = vec4(ambient + diffuse + specular, 1.0);
}